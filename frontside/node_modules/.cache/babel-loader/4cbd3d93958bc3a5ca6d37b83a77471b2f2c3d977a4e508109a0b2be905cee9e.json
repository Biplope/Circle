{"ast":null,"code":"import { patchDataApi, postDataApi, deleteDataApi, getDataApi } from \"../../utils/fetchDataApi\";\nimport { POST_TYPES } from \"./postActions\";\nimport { EditData, DeleteData } from \"./alertActions\";\nimport { createNotify, removeNotify } from \"./notifyActions\";\nexport const MESS_TYPE = {\n  ADD_USER: \"ADD_USER\",\n  ADD_MESSAGE: \"ADD_MESSAGE\",\n  GET_CONVERSATION: \"GET_CONVERSATION\",\n  GET_MESSAGE: \"GET_MESSAGE\",\n  DELETE_MESSAGE: \"DELETE_MESSAGE\"\n};\nexport const AddUser = ({\n  user,\n  message\n}) => async dispatch => {\n  if (message.users.every(item => item._id !== user._id)) {\n    dispatch({\n      type: MESS_TYPE.ADD_USER,\n      payload: user\n    });\n  }\n};\nexport const addMessage = ({\n  auth,\n  msg,\n  socket\n}) => async dispatch => {\n  dispatch({\n    type: MESS_TYPE.ADD_MESSAGE,\n    payload: msg\n  });\n  socket.emit('addMessage', msg);\n  try {\n    await postDataApi('message', msg, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: \"there is a error\"\n      }\n    });\n  }\n};\nexport const getConversations = auth => async dispatch => {\n  try {\n    const res = await getDataApi('conversations', auth.token);\n    let newArr = [];\n    res.data.conversation.forEach(item => {\n      item.recipients.forEach(cv => {\n        if (cv._id !== auth.user._id) {\n          newArr.push({\n            ...cv,\n            text: item.text,\n            media: item.media\n          });\n        }\n      });\n    });\n    dispatch({\n      type: MESS_TYPE.GET_CONVERSATION,\n      payload: {\n        newArr,\n        result: res.data.result\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: \"there is a error\"\n      }\n    });\n  }\n};\nexport const getMessages = ({\n  auth,\n  id\n}) => async dispatch => {\n  try {\n    const res = await getDataApi(`message/${id}`, auth.token);\n    dispatch({\n      type: MESS_TYPE.GET_MESSAGE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: \"there is a error\"\n      }\n    });\n  }\n};\nexport const deleteMessage = ({\n  message,\n  data,\n  auth\n}) => async dispatch => {\n  const newData = DeleteData(message.data, data._id);\n  dispatch({\n    type: MESS_TYPE.DELETE_MESSAGE,\n    payload: {\n      newData,\n      _id: data.recipient\n    }\n  });\n  try {\n    await deleteDataApi(`message/${data._id}`, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: \"there is a error\"\n      }\n    });\n  }\n};","map":{"version":3,"names":["patchDataApi","postDataApi","deleteDataApi","getDataApi","POST_TYPES","EditData","DeleteData","createNotify","removeNotify","MESS_TYPE","ADD_USER","ADD_MESSAGE","GET_CONVERSATION","GET_MESSAGE","DELETE_MESSAGE","AddUser","user","message","dispatch","users","every","item","_id","type","payload","addMessage","auth","msg","socket","emit","token","err","error","getConversations","res","newArr","data","conversation","forEach","recipients","cv","push","text","media","result","getMessages","id","deleteMessage","newData","recipient"],"sources":["D:/MERN-Social-Media-Network-Using-React-Express-Nodejs-and-MongoDB-main/MERN-Social-Media-Network-Using-React-Express-Nodejs-and-MongoDB-main/frontside/src/redux/actions/messageActions.js"],"sourcesContent":["import {patchDataApi, postDataApi , deleteDataApi, getDataApi} from \"../../utils/fetchDataApi\"\nimport {POST_TYPES} from \"./postActions\"\nimport {EditData, DeleteData} from \"./alertActions\"\nimport {createNotify, removeNotify} from \"./notifyActions\"\n\nexport const MESS_TYPE = {\n    ADD_USER: \"ADD_USER\",\n    ADD_MESSAGE:\"ADD_MESSAGE\",\n    GET_CONVERSATION:\"GET_CONVERSATION\",\n    GET_MESSAGE:\"GET_MESSAGE\",\n    DELETE_MESSAGE:\"DELETE_MESSAGE\"\n}\n\nexport const AddUser = ({user, message}) => async (dispatch) => {\n   if(message.users.every(item => item._id !== user._id)){\n       dispatch({type:MESS_TYPE.ADD_USER, payload: user})\n   }\n}\n\nexport const addMessage = ({auth, msg, socket}) => async(dispatch) => {\n    \n    dispatch({type: MESS_TYPE.ADD_MESSAGE , payload: msg})\n    socket.emit('addMessage' , msg)\n    try{\n        await postDataApi('message', msg, auth.token)\n\n    }\n    catch(err){\n        dispatch({\n            type:'ALERT',\n           payload:{\n            error: \"there is a error\"\n           }\n   })\n    }\n}\n\nexport const getConversations = (auth) => async(dispatch) =>{\n    try {\n        \n        const res = await getDataApi('conversations', auth.token)\n        let newArr = [];\n        res.data.conversation.forEach(item =>{\n            item.recipients.forEach(cv=>{\n                if(cv._id !== auth.user._id){\n                    newArr.push({...cv, text:item.text, media:item.media})\n                }\n            })\n        })\n        dispatch({type: MESS_TYPE.GET_CONVERSATION, payload: {newArr, result: res.data.result}})\n    } catch (err) {\n        dispatch({\n            type:'ALERT',\n           payload:{\n            error: \"there is a error\"\n           }\n   })\n    \n    }\n\n}\n\nexport const getMessages = ({auth, id}) => async (dispatch) =>{\n    try {\n        const res= await getDataApi(`message/${id}`, auth.token)\n        dispatch({type:MESS_TYPE.GET_MESSAGE, payload: res.data})\n    } catch (err) {\n        dispatch({\n            type:'ALERT',\n           payload:{\n            error: \"there is a error\"\n           }\n   })\n    }\n}\n\nexport const deleteMessage = ({message, data, auth}) => async (dispatch) =>{\n    \n    const newData = DeleteData(message.data, data._id)\n   \n    dispatch({type: MESS_TYPE.DELETE_MESSAGE , payload : { newData, _id: data.recipient}})\n    try {\n       await deleteDataApi(`message/${data._id}`, auth.token)\n    } catch (err) {\n        dispatch({\n            type:'ALERT',\n           payload:{\n            error: \"there is a error\"\n           }\n   })\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}