{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { POST_TYPES } from \"./redux/actions/postActions\";\nimport { NOTIFY_TYPES } from \"./redux/actions/notifyActions\";\nimport { MESS_TYPE } from \"./redux/actions/messageActions\";\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketioClient = () => {\n  _s();\n  const {\n    auth,\n    socket\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    socket.emit('joinUser', auth.user._id);\n  }, [socket, auth.user._id]);\n  useEffect(() => {\n    socket.on('likeToClient', newPost => {\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n    });\n    return () => socket.off('likeToClient');\n  }, [socket, dispatch]);\n  useEffect(() => {\n    socket.on('unlikeToClient', newPost => {\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n    });\n    return () => socket.off('unlikeToClient');\n  }, [socket, dispatch]);\n  useEffect(() => {\n    socket.on('createCommentToClient', newPost => {\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n    });\n    return () => socket.off('createCommentToClient');\n  }, [socket, dispatch]);\n  useEffect(() => {\n    socket.on('deleteCommentToClient', newPost => {\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      });\n    });\n    return () => socket.off('deleteCommentToClient');\n  }, [socket, dispatch]);\n  useEffect(() => {\n    socket.on('addfriendToClient', newUser => {\n      dispatch({\n        type: 'AUTH',\n        payload: {\n          ...auth,\n          user: newUser\n        }\n      });\n    });\n    return () => socket.off('addfriendToClient');\n  }, [socket, dispatch, auth]);\n  useEffect(() => {\n    socket.on('unfriendToClient', newUser => {\n      dispatch({\n        type: 'AUTH',\n        payload: {\n          ...auth,\n          user: newUser\n        }\n      });\n    });\n    return () => socket.off('unfriendToClient');\n  }, [socket, dispatch, auth]);\n  useEffect(() => {\n    socket.on('createNotifyToClient', msg => {\n      dispatch({\n        type: NOTIFY_TYPES.CREATE_NOTIFIES,\n        payload: msg\n      });\n    });\n    return () => socket.off('createNotifyToClient');\n  }, [socket, dispatch]);\n  useEffect(() => {\n    socket.on('removeNotifyToClient', msg => {\n      dispatch({\n        type: NOTIFY_TYPES.REMOVE_NOTIFIES,\n        payload: msg\n      });\n    });\n    return () => socket.off('removeNotifyToClient');\n  }, [socket, dispatch]);\n  useEffect(() => {\n    socket.on('addMessageToclient', msg => {\n      dispatch({\n        type: MESS_TYPE.ADD_MESSAGE,\n        payload: msg\n      });\n    });\n    return () => socket.off('addMessageToclient');\n  }, [socket, dispatch]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(SocketioClient, \"T9i1E3izR0xI+34xnNJ89IaHnPg=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = SocketioClient;\nexport default SocketioClient;\nvar _c;\n$RefreshReg$(_c, \"SocketioClient\");","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","POST_TYPES","NOTIFY_TYPES","MESS_TYPE","Fragment","_Fragment","jsxDEV","_jsxDEV","SocketioClient","_s","auth","socket","state","dispatch","emit","user","_id","on","newPost","type","UPDATE_POST","payload","off","newUser","msg","CREATE_NOTIFIES","REMOVE_NOTIFIES","ADD_MESSAGE","_c","$RefreshReg$"],"sources":["D:/MERN-Social-Media-Network-Using-React-Express-Nodejs-and-MongoDB-main/MERN-Social-Media-Network-Using-React-Express-Nodejs-and-MongoDB-main/frontside/src/SocketioClient.js"],"sourcesContent":["import React , {useEffect} from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {POST_TYPES} from \"./redux/actions/postActions\";\nimport {NOTIFY_TYPES} from \"./redux/actions/notifyActions\";\nimport {MESS_TYPE} from \"./redux/actions/messageActions\";\n\nconst SocketioClient = () =>{\n\n    const {auth, socket} = useSelector(state => state);\n    const dispatch = useDispatch();\n\n\n    useEffect (()=>{\n\n    socket.emit('joinUser', auth.user._id)\n \n    },[socket, auth.user._id])\n\n    useEffect(()=>{\n        socket.on('likeToClient', newPost => {\n           \n        dispatch({type:POST_TYPES.UPDATE_POST, payload: newPost})})\n        return ()=>socket.off('likeToClient')\n    },[socket,dispatch])\n\n    useEffect(()=>{\n        socket.on('unlikeToClient', newPost=>{\n        dispatch({type:POST_TYPES.UPDATE_POST, payload: newPost})})\n        return ()=>socket.off('unlikeToClient')\n    },[socket,dispatch])\n\n    useEffect(()=>{\n        socket.on('createCommentToClient', newPost => {\n        dispatch({type:POST_TYPES.UPDATE_POST, payload: newPost})})\n        return ()=>socket.off('createCommentToClient')\n    },[socket,dispatch])\n\n\n    useEffect(()=>{\n        socket.on('deleteCommentToClient', newPost=>{\n        dispatch({type:POST_TYPES.UPDATE_POST, payload: newPost})})\n        return ()=>socket.off('deleteCommentToClient')\n    },[socket,dispatch])\n\n    useEffect(()=>{\n        socket.on('addfriendToClient', newUser =>{\n        dispatch({type:'AUTH', payload: {...auth, user: newUser}})})\n\n        return ()=>socket.off('addfriendToClient')\n    },[socket,dispatch,auth])\n\n     useEffect(()=>{\n        socket.on('unfriendToClient', newUser =>{\n        dispatch({type:'AUTH', payload: {...auth, user: newUser}})})\n        \n        return ()=>socket.off('unfriendToClient')\n    },[socket,dispatch , auth])\n\n    useEffect(()=>{\n        socket.on('createNotifyToClient', msg =>{\n        dispatch({type:NOTIFY_TYPES.CREATE_NOTIFIES, payload: msg})})\n        \n        return ()=>socket.off('createNotifyToClient')\n    },[socket,dispatch])\n\n    useEffect(()=>{\n        socket.on('removeNotifyToClient', msg =>{\n        dispatch({type:NOTIFY_TYPES.REMOVE_NOTIFIES, payload: msg})})\n        \n        return ()=>socket.off('removeNotifyToClient')\n    },[socket,dispatch])\n    \n    useEffect(()=>{\n        socket.on('addMessageToclient', msg =>{\n        dispatch({type:MESS_TYPE.ADD_MESSAGE, payload: msg})})\n        \n        return ()=>socket.off('addMessageToclient')\n    },[socket,dispatch])\n    return <></>\n}\n\nexport default SocketioClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}