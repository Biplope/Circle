{"ast":null,"code":"import { patchDataApi, postDataApi, deleteDataApi } from \"../../utils/fetchDataApi\";\nimport { POST_TYPES } from \"./postActions\";\nimport { EditData, DeleteData } from \"./alertActions\";\nimport { createNotify, removeNotify } from \"./notifyActions\";\nexport const createComment = ({\n  pos,\n  newComment,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = {\n    ...pos,\n    commentss: [...pos.commentss, newComment]\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  try {\n    const data = {\n      ...newComment,\n      postId: pos._id,\n      postUserId: pos.user._id\n    };\n    const res = await postDataApi('comment', data, auth.token);\n    const newData = {\n      ...res.data.newComment,\n      user: auth.user\n    };\n    const newPost = {\n      ...pos,\n      commentss: [...pos.commentss, newData]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit('createComment', newPost);\n    console.log(newPost);\n    const msg = {\n      id: res.data.newComment._id,\n      text: newComment.reply ? 'mentioned you in comment' : 'comment on the post',\n      url: `/post/${pos._id}`,\n      recipients: newComment.reply ? [newComment.tag._id] : [pos.user._id],\n      content: pos.content,\n      image: pos.images[0].secure_url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n}; /// open the mongodb and drop the collection of comments...\n\nexport const updateComment = ({\n  comment,\n  content,\n  pos,\n  auth\n}) => async dispatch => {\n  const newComment = EditData(pos.commentss, comment._id, {\n    ...comment,\n    content\n  });\n  console.log(newComment);\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newComment\n  });\n  try {\n    const res = await patchDataApi(`comment/${comment._id}`, {\n      content\n    }, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likecomment = ({\n  comment,\n  pos,\n  auth\n}) => async dispatch => {\n  console.log({\n    comment,\n    pos,\n    auth\n  });\n  const newcomment = {\n    ...comment,\n    likes: [...comment.likes, auth.user]\n  };\n  const newComments = EditData(pos.commentss, comment._id, newcomment);\n  const newPost = {\n    ...pos,\n    commentss: newComments\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  try {\n    const res = await patchDataApi(`comment/${comment._id}/like`, null, auth.token);\n    console.log(res);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unlikecomment = ({\n  comment,\n  pos,\n  auth\n}) => async dispatch => {\n  console.log({\n    comment,\n    pos,\n    auth\n  });\n  const newcomment = {\n    ...comment,\n    likes: DeleteData(comment.likes, auth.user._id)\n  };\n  const newComments = EditData(pos.commentss, comment._id, newcomment);\n  const newPost = {\n    ...pos,\n    commentss: newComments\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  try {\n    const res = await patchDataApi(`comment/${comment._id}/unlike`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteComment = ({\n  comment,\n  pos,\n  auth,\n  socket\n}) => async dispatch => {\n  const deleteArr = [...pos.commentss.filter(cm => cm.reply === comment._id), comment];\n  const newPost = {\n    ...pos,\n    commentss: pos.commentss.filter(cm => !deleteArr.find(da => cm._id === da._id))\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  try {\n    deleteArr.forEach(item => {\n      deleteDataApi(`comment/${item._id}`, auth.token);\n      const msg = {\n        id: item._id,\n        text: comment.reply ? 'mentioned you in comment' : 'comment on the post',\n        url: `/post/${pos._id}`,\n        recipients: comment.reply ? [comment.tag._id] : [pos.user._id]\n      };\n      dispatch(removeNotify({\n        msg,\n        auth,\n        socket\n      }));\n    });\n    socket.emit('deleteComment', newPost);\n  } catch (err) {\n    dispatch({\n      type: 'ALERT',\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"names":["patchDataApi","postDataApi","deleteDataApi","POST_TYPES","EditData","DeleteData","createNotify","removeNotify","createComment","pos","newComment","auth","socket","dispatch","newPost","commentss","type","UPDATE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","emit","console","log","msg","id","text","reply","url","recipients","tag","content","image","images","secure_url","err","error","response","updateComment","comment","likecomment","newcomment","likes","newComments","unlikecomment","deleteComment","deleteArr","filter","cm","find","da","forEach","item"],"sources":["D:/MERN-Social-Media-Network-Using-React-Express-Nodejs-and-MongoDB-main/Circles/Circle/frontside/src/redux/actions/commentActions.js"],"sourcesContent":["import {patchDataApi, postDataApi , deleteDataApi} from \"../../utils/fetchDataApi\"\nimport {POST_TYPES} from \"./postActions\"\nimport {EditData, DeleteData} from \"./alertActions\"\nimport {createNotify, removeNotify} from \"./notifyActions\"\n\nexport const createComment = ({pos, newComment, auth, socket}) => async (dispatch) =>{\n \n    const newPost = {...pos , commentss:[...pos.commentss, newComment]} \n    dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost})\n    \n    try {\n        const data={...newComment, postId: pos._id, postUserId: pos.user._id}\n\n        const res= await postDataApi('comment', data, auth.token)\n        const newData = {...res.data.newComment, user:auth.user}\n        const newPost = {...pos, commentss:[...pos.commentss, newData]}\n\n        dispatch({type:POST_TYPES.UPDATE_POST, payload: newPost})\n\n        socket.emit('createComment', newPost)\n       console.log(newPost)\n        const msg = {\n            id: res.data.newComment._id,\n            text: newComment.reply ? 'mentioned you in comment' : 'comment on the post',\n            url: `/post/${pos._id}`,\n            recipients: newComment.reply ?  [newComment.tag._id] : [pos.user._id],\n            content: pos.content,\n            image:pos.images[0].secure_url,\n\n        }\n        dispatch(createNotify({msg, auth, socket}))\n\n    } catch (err) {\n        dispatch({\n            type:'ALERT',\n           payload:{\n            error: err.response.data.msg\n           }\n   })\n    }\n}   /// open the mongodb and drop the collection of comments...\n\nexport const updateComment = ({comment,content,pos,auth}) => async (dispatch) =>{\n \n    const newComment = EditData(pos.commentss, comment._id, {...comment, content})\n    console.log(newComment)\n    dispatch({type: POST_TYPES.UPDATE_POST, payload : newComment})\n    try {\n        const res= await patchDataApi(`comment/${comment._id}`,{content}, auth.token)\n        \n    } catch (err) {\n        dispatch({\n            type:'ALERT',\n           payload:{\n            error: err.response.data.msg\n           }\n   })\n    }\n}\n\nexport const likecomment = ({comment, pos, auth}) => async (dispatch) =>{\n    console.log({comment, pos, auth})\n\n    const newcomment = {...comment, likes:[...comment.likes, auth.user]}\n\n    const newComments = EditData(pos.commentss, comment._id, newcomment)\n\n    const newPost = {...pos, commentss: newComments}\n\n    dispatch({type:POST_TYPES.UPDATE_POST , payload : newPost})\n    try {\n        const res = await patchDataApi(`comment/${comment._id}/like`, null , auth.token)\n        console.log(res)\n    } catch (err) {\n        dispatch({\n            type:'ALERT',\n           payload:{\n            error: err.response.data.msg\n           }\n   })\n    }\n\n\n}\n\nexport const unlikecomment = ({comment, pos, auth}) => async (dispatch) =>{\n    console.log({comment, pos, auth})\n    const newcomment = {...comment, likes:DeleteData(comment.likes, auth.user._id)}\n\n    const newComments = EditData(pos.commentss, comment._id, newcomment)\n\n    const newPost = {...pos, commentss: newComments}\n\n    dispatch({type:POST_TYPES.UPDATE_POST , payload : newPost})\n\n    try {\n        const res = await patchDataApi(`comment/${comment._id}/unlike`, null , auth.token)\n        \n        \n    } catch(err){\n        dispatch({\n            type:'ALERT',\n           payload:{\n            error: err.response.data.msg\n           }\n   })\n    }\n}\n\nexport const deleteComment = ({comment, pos, auth,socket}) => async (dispatch) =>{\n   \n    const deleteArr = [...pos.commentss.filter(cm =>cm.reply === comment._id), comment]\n    const newPost = {\n        ...pos,\n        commentss: pos.commentss.filter(cm=> !deleteArr.find(da => cm._id === da._id))\n    }\n    dispatch({type: POST_TYPES.UPDATE_POST , payload: newPost})\n\n    try {\n        deleteArr.forEach(item=>{\n            deleteDataApi(`comment/${item._id}`, auth.token)\n            const msg = {\n                id: item._id,\n                text: comment.reply ? 'mentioned you in comment' : 'comment on the post',\n                url: `/post/${pos._id}`,\n                recipients: comment.reply?  [comment.tag._id] : [pos.user._id],\n                \n    \n            }\n            dispatch(removeNotify({msg, auth, socket}))\n        })\n\n        socket.emit('deleteComment', newPost)\n    } catch (err) {\n        dispatch({\n            type:'ALERT',\n           payload:{\n            error: err.response.data.msg\n           }\n   })\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}